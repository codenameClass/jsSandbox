//GLOBAL
const COLORS = ['red', 'green', 'blue', 'yellow', 'orange', 'purple'];

//SETUP
const setup = () => {
	const body = document.querySelector('body');
	const button = document.createElement('button');
  button.textContent = 'Change Color';
  button.name = 'changeBackground';
  button.classList.add('button');
  button.addEventListener('click', changeBackgroundToRandomColor);
  body.appendChild(button);
}

//Functions
const isArrayNonexistent = (array) => array == null || (!Array.isArray(array));
const isArrayEmpty = (array) => isArrayNonexistent(array) || array.length < 1;
const isIndexInvalid = (index, array) => index == null || index >= array.length;

const changeBackgroundToRandomColor = (event) => {
	//Check if global variables are available
  if(isArrayEmpty(COLORS)) return;

	const button = event.target;
  const lastColorIndex = button.hasAttribute('currentIndex') ? parseInt(button.getAttribute('currentIndex'), 10) : -1;
  const colorIndex = getRandomNumber(lastColorIndex);
  
  //Update
  updateBackground(colorIndex, attributeStorage = button);
};

const updateBackground = (colorIndex, attributeStorage) => {
	if(isArrayEmpty(COLORS) || isIndexInvalid(colorIndex, COLORS) || attributeStorage == null) return; //Check if colorIndex is valid
  
  //update background
	const body = document.querySelector('body');
  body.style.backgroundColor = COLORS[colorIndex];
  
  //update storage
  attributeStorage.setAttribute('currentIndex', colorIndex);
}

const getRandomNumber = (lastIndex) => {
	if(isArrayEmpty(COLORS)) return;
  if(COLORS.length < 2) return 0;
  
  const edgeMin = -1;
  const edgeMax = COLORS.length
  
  let index = 0
  do {
  	index = edgeMin + Math.ceil(edgeMax * Math.random() || index); //make sure every element has an equal chance to get picked with one bit advantage on returning the default must random return 0.
    
  } while(lastIndex === index);
  
  return index;
  
}

//load
window.addEventListener('load', setup);
